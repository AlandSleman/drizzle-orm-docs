---
interface Props {
  forTitle?: boolean;
}

const { forTitle } = Astro.props;
---

<button
  data-collapse-btn
  type="button"
  class:list={["button-wrap", forTitle && "button-wrap--title"]}
  data-for-title={forTitle?.toString()}
  aria-label="Copy"
>
  <svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M8.67383 5.36887L12.0427 2L15.4116 5.36887"
      stroke="black"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
    <path
      d="M15.4116 18.8443L12.0427 22.2132L8.67383 18.8443"
      stroke="black"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
    <path
      d="M12.0426 2.00003V10.0853"
      stroke="black"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
    <path
      d="M12.0426 22.2132V14.1279"
      stroke="black"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
  </svg>
</button>
<style>
  html[class~="dark"] .button-wrap:hover {
    color: #f9fafb;
  }
  html[class~="dark"] .button-wrap {
    border-color: rgba(255, 255, 255, 0.1);
    background-color: rgba(138, 208, 255, 0.1);
    color: #9ca3af;
  }

  .button-wrap:hover {
    color: #111827;
  }

  .button-wrap {
    border: 1px solid rgba(0, 0, 0, 0.05);
    border-radius: 0.375rem;
    backdrop-filter: blur(12px);
    cursor: pointer;
    text-transform: none;
    font-size: 100%;
    outline-offset: 2px;
    outline: 2px solid transparent;
    -webkit-transition-property: all;
    -o-transition-property: all;
    transition-property: all;
    -webkit-transition-duration: 0.15s;
    -o-transition-duration: 0.15s;
    transition-duration: 0.15s;
    -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    -o-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    padding: 0.375rem;
    background-color: #ebf0f9;
    color: rgba(75, 85, 99, 0.6);
    position: absolute;
    top: 0;
    right: 46px;
    z-index: 99;
    margin: 11px;
    margin-left: auto;
    opacity: 0;
  }

  .button-wrap--title {
    position: static;
    margin: 0;
    opacity: 1;
  }

  .button-wrap svg {
    width: 16px;
    height: 16px;
    pointer-events: none;
  }
</style>
<script>
  const collapseButton = document.querySelectorAll(
    "[data-collapse-btn]",
  ) as NodeListOf<HTMLElement>;
  collapseButton.forEach((n) => {
    n.addEventListener("click", () => {
      const parent = n.parentElement?.parentElement;
      if (parent) {
        parent.classList.toggle("collapsable");
      }
    });
  });
  const expandButton = document.querySelectorAll(
    "[data-expand-button]",
  ) as NodeListOf<HTMLElement>;
  expandButton.forEach((n) => {
    n.addEventListener("click", () => {
      const parent = n.parentElement;
      if (parent) {
        parent.classList.toggle("collapsable");
      }
    });
  });
</script>
