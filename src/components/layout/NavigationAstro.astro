---
import NavItem from "./NavItem.astro";
import GithubStars from "./GithubStars.astro";
import Logo from "./Logo.astro";
import LandingNavbar from "./LandingNavbar.astro";
---

<div id="nav_container" class="nav_container">
  <div class="nav_content_wrap">
    <div style="display: flex; align-items: center; flex: 1;">
      <Logo />
    </div>
    <LandingNavbar />
    <div style="display: flex; align-items: center; flex: 1; justify-content: flex-end; gap: 24px;">
      <GithubStars stars={18} />
      <NavItem
        value="Docs"
        href="/docs/overview"
        activeKeywords={["/kit-docs", "/docs"]}
      />  
    </div>
  </div>
</div>
<script is:inline>
  const currentThemeIcons = document.querySelectorAll(
    "[data-current-theme-icon]",
  );
  const systemIconTemplate = document.querySelector("#theme-system-icon");
  const lightIconTemplate = document.querySelector("#theme-light-icon");
  const darkIconTemplate = document.querySelector("#theme-dark-icon");
  const themeSelect = document.getElementById("theme__select");

  const updateIcon = () => {
    const theme = localStorage.getItem("theme");
    if (
      !theme ||
      !currentThemeIcons ||
      !systemIconTemplate ||
      !lightIconTemplate ||
      !darkIconTemplate
    )
      return;
    currentThemeIcons.forEach((currentThemeIcon) => {
      if (theme === "system") {
        currentThemeIcon.innerHTML = "";
        currentThemeIcon.appendChild(
          systemIconTemplate.content.cloneNode(true),
        );
      } else if (theme === "light") {
        currentThemeIcon.innerHTML = "";
        currentThemeIcon.appendChild(lightIconTemplate.content.cloneNode(true));
      } else if (theme === "dark") {
        currentThemeIcon.innerHTML = "";
        currentThemeIcon.appendChild(darkIconTemplate.content.cloneNode(true));
      }
      themeSelect.value = theme;
    });

    let themeName = "";

    if (theme === "system") {
      themeName = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    } else {
      themeName = theme;
    }
    if (window.inkeepWidget) {
      window.inkeepWidget.render({
        baseSettings: {
          theme: {
            colorMode: {
              forcedColorMode: themeName,
            },
          },
        },
      });
    }
  };

  const dropdownItems = document.getElementById("theme-dropdown-items");
  const themeItems = document.querySelectorAll("[data-theme-value]");

  const themeCurrentBtn = document.querySelector(".theme__current-btn");
  if (themeCurrentBtn) {
    themeCurrentBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      if (dropdownItems) {
        dropdownItems.classList.toggle("d-flex");
      }
    });
  }

  window.addEventListener("click", (e) => {
    const clickedElement = e.target;
    if (!clickedElement.matches(".dialect-selector__button")) {
      if (dropdownItems && dropdownItems.classList.contains("d-flex")) {
        dropdownItems.classList.remove("d-flex");
      }
    }
  });

  if (themeItems) {
    themeItems.forEach((element) => {
      element.addEventListener("click", () => {
        const theme = element.dataset.themeValue;
        if (!theme) return;
        setPreference(theme);
        updateIcon();
        dropdownItems.classList.remove("d-flex");
      });
    });
  }

  if (themeSelect) {
    themeSelect.addEventListener("change", (e) => {
      const theme = e.target.value;
      if (!theme) return;
      setPreference(theme);
      updateIcon();
    });
  }

  const burgerBtn = document.querySelector("[data-nav-burger-btn]");
  const navContainer = document.getElementById("nav_container");
  const navMobile = document.getElementById("nav_mobile");

  if (burgerBtn && navContainer && navMobile) {
    burgerBtn.addEventListener("click", () => {
      navContainer.classList.toggle("nav_container_open");
      navMobile.classList.toggle("invisible");
      document.body.style.overflow = navContainer.classList.contains(
        "nav_container_open",
      )
        ? "hidden"
        : "auto";
    });
  }

  updateIcon();
</script>

<style>
  .nav_container {
    z-index: 20;
    width: 100%;
  }

  .nav_content_wrap {
    position: relative;
    margin-left: auto;
    margin-right: auto;
    display: flex;
    height: 64px;
    max-width: 1440px;
    align-items: center;
    justify-content: space-between;
    gap: 16px;
    padding-left: max(env(safe-area-inset-left), 24px);
    padding-right: max(env(safe-area-inset-right), 24px);
  }

  html.dark .nav_content_wrap::after {
    background: linear-gradient(180deg, #111 0%, transparent 100%);
  }

  .nav_content_wrap::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    height: 24px;
    background: linear-gradient(180deg, #fff 0%, transparent 100%);
    z-index: 10;
  }

  .nav_logo {
    outline-offset: 2px;
    outline: 2px solid transparent;
    border-radius: 4px;
    display: flex;
    align-items: center;
    margin-right: auto;
  }

  .nav_desktop {
    display: contents;
  }

  .nav_mobile {
    display: none;
  }

  .nav_container_open .burger svg g {
    transition: transform 0.2s cubic-bezier(0.25, 1, 0.5, 1) 0.2s;
    transform-origin: 50%;
  }

  .nav_container_open .burger svg g:first-of-type {
    transform: rotate(45deg);
  }

  .nav_container_open .burger svg g:first-of-type path {
    transform: translateY(6px);
    opacity: 1;
  }

  .nav_container_open .burger svg path {
    opacity: 0;
    transition:
      transform 0.2s cubic-bezier(0.25, 1, 0.5, 1),
      opacity 0s 0.2s;
  }

  .nav_container_open .burger svg g:nth-of-type(2) {
    transform: rotate(-45deg);
  }
  .nav_container_open .burger svg g:nth-of-type(2) path {
    opacity: 1;
    transform: translateY(-6px);
  }

  .burger {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    margin-right: -8px;
    border-radius: 4px;
    cursor: pointer;
  }

  .burger:active {
    background-color: rgba(156, 163, 175, 0.2);
  }

  .burger g {
    transform-origin: 50%;
    transition: transform 0.2s cubic-bezier(0.25, 1, 0.5, 1);
  }

  .burger path {
    opacity: 1;
    transition:
      transform 0.2s cubic-bezier(0.25, 1, 0.5, 1) 0.2s,
      opacity 0.2s 0.2s;
  }

  @media screen and (max-width: 768px) {
    .nav_content_wrap {
      padding-left: max(env(safe-area-inset-left), 16px);
      padding-right: max(env(safe-area-inset-right), 16px);
    }
    .nav_desktop {
      display: none;
    }
    .nav_mobile {
      display: contents;
    }
  }
</style>
