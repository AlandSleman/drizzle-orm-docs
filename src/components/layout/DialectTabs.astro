---
import { dialects } from "@/data/dialects";
import DialectTab from "./DialectTab.astro";

const { slug = "" } = Astro.params;

const current = Object.keys(dialects).find((key) => {
  const item = dialects[key].href.split("/").at(-1);
  const slugDialect = slug.split("/").at(-1);
  return item === slugDialect;
});

const getLinkWithDialect = (dialect: string) => {
  const slugDialect = slug.split("/").at(-1);
  const slugWithoutDialect = slug.replace(`/${slugDialect}`, "");
  return `/${slugWithoutDialect}${dialect}`;
};
---

<div class="dialect-tabs__container">
  <div class="dialect-tabs">
    {
      Object.keys(dialects).map((name) => (
        <a
          data-dialect-tab={name}
          class:list={[
            "dialect-tabs__tab",
            current === name && "dialect-tabs__tab--active",
          ]}
          href={getLinkWithDialect(dialects[name].href)}
        >
          <DialectTab card={dialects[name]} />
        </a>
      ))
    }
  </div>
</div>

<style>
  .dialect-tabs__container {
    position: sticky;
    top: 0;
    display: flex;
    margin-left: -48px;
    width: calc(100% + 48px + 40px);
    margin-top: -16px;
    height: 44px;
    z-index: 19;
    margin-bottom: 32px;
  }

  html.dark .dialect-tabs::after {
    background: linear-gradient(180deg, #111, transparent);
  }

  .dialect-tabs::after {
    background: linear-gradient(180deg, #fff, transparent);
    content: "";
    height: 24px;
    left: 0;
    pointer-events: none;
    position: absolute;
    top: 100%;
    width: 100%;
  }

  html.dark .dialect-tabs {
    background-color: #111;
    border-top: none;
  }

  .dialect-tabs {
    background-color: #ffffff;
    display: flex;
    width: 100%;
    height: 44px;
    position: relative;
  }

  html.dark .dialect-tabs__tab {
    background-color: #111111;
    color: #d5d5d5;
  }

  .dialect-tabs__tab {
    display: flex;
    align-items: center;
    width: fit-content;
    border-radius: 0;
    padding: 8px 16px;
    gap: 8px;
    font-size: 16px;
    font-weight: 400;
    gap: 8px;
    text-decoration: none;
    color: #3b3f4b;
    background-color: #ffffff;
  }

  html.dark .dialect-tabs__tab {
    border-right: 1px solid rgb(48, 48, 48);
    border-top: 1px solid rgb(48, 48, 48);
    border-bottom: 1px solid rgb(48, 48, 48);
  }

  .dialect-tabs__tab {
    border-top: 1px solid #efefef;
    border-right: 1px solid #efefef;
    border-bottom: 1px solid #efefef;
  }

  html.dark .dialect-tabs__tab--active {
    background-color: #171717;
  }

  .dialect-tabs__tab--active {
    background-color: #f8fafc;
  }

  @media screen and (max-width: 1279px) {
    .dialect-tabs__container {
      margin-left: -24px;
      width: calc(100% + 24px + 12px);
    }
  }

  @media screen and (max-width: 768px) {
    .dialect-tabs__container {
      margin-left: -16px;
      width: calc(100% + 32px);
    }
    .dialect-tabs {
      max-height: 36px;
    }
  }
</style>
<script is:inline>
  const dialectContainer = document.querySelector(
    ".documentation-content-wrap",
  );

  const dialectTabs = document.querySelector(".dialect-tabs");

  const getMaxHeightForDialectTabs = (initialValue, scrollTop, minHeight) => {
    return Math.max(initialValue - scrollTop, minHeight) + "px";
  };

  if (dialectContainer && dialectTabs) {
    const initialTabsHeight = dialectTabs.offsetHeight;

    dialectContainer.addEventListener("scroll", function () {
      const scrollTop = dialectContainer.scrollTop;
      dialectTabs.style.height = getMaxHeightForDialectTabs(
        initialTabsHeight,
        scrollTop,
        36,
      );
    });
  }
</script>
<script>
  import updateDialectLinks from "@/utils/updateDialectLinks";

  const typeSelectorBtn = document.querySelector(
    ".dialect-tabs__tab--active",
  ) as HTMLDivElement;

  const dialect = typeSelectorBtn?.dataset?.dialectTab;
  if (dialect) {
    localStorage.setItem("dialect", dialect);
    updateDialectLinks();
  }
</script>
